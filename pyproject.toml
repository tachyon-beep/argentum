[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "argentum"
version = "0.1.0"
description = "A versatile multi-agent AI dialogue system for debates and advisory panels"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Argentum Team"}
]
keywords = ["ai", "multi-agent", "llm", "debate", "orchestration", "dialogue"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "openai>=1.0.0",
    "litellm>=1.0.0",
    "tiktoken>=0.5.0",
    "httpx>=0.25.0",
    "tenacity>=8.0.0",
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "asyncio>=3.4.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "ruff>=0.14.0",
    "mypy>=1.5.0",
    "pylint>=4.0.0",
    "pre-commit>=3.3.3",
]

storage = [
    "sqlalchemy>=2.0.0",
    "aiosqlite>=0.19.0",
    "redis>=5.0.0",
]

all = [
    "argentum[dev,storage]",
]

[project.urls]
Homepage = "https://github.com/yourusername/argentum"
Documentation = "https://argentum.readthedocs.io"
Repository = "https://github.com/yourusername/argentum"
Issues = "https://github.com/yourusername/argentum/issues"

[project.scripts]
argentum = "argentum.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["argentum*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = "-v --cov=argentum --cov-report=term-missing"

[tool.black]
line-length = 140
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 140
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "YTT",  # flake8-2020
    "ASYNC",# flake8-async
    "S",    # flake8-bandit (security)
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate (commented-out code)
    "PL",   # Pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "PERF", # Perflint
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",    # line too long, handled by black
    "COM812",  # missing-trailing-comma (conflicts with formatter)
    "ISC001",  # single-line-implicit-string-concatenation (conflicts with formatter)
    "T201",    # print found (we use print intentionally in CLI)
    "S101",    # use of assert (we use assert in tests)
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value comparison
    "TRY003",  # long exception message
    "EM101",   # raw string in exception
    "FBT001",  # boolean positional arg
    "FBT002",  # boolean default value
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"argentum/llm/provider.py" = ["PLC0415"]  # Intentional lazy imports to avoid circular dependencies

[tool.pylint.format]
max-line-length = 140

[tool.pylint.messages_control]
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
]

[tool.pylint.basic]
py-version = "3.12"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
